#!/usr/bin/env bash

PASS_DIR=$HOME/.password-store

HIST_FILE=$HOME/.ropass_history
HIST_NUM=5

REGEX_USER="sed -n -e '/^user: /p' | sed 's/^user: //'"
REGEX_PASS="sed -n -e '1p'"
REGEX_OTP="sed -n -e '/^otpauth:\/\//p' | grep -o '\?secret=[0-9a-Z]*' | sed 's/\?secret=//'"
REGEX_URL="sed -n -e '/^url: /p' | sed 's/^url: //'"

function retrieve_passwords() {
     # Retrieve history list if HIST_FILE exists.
     if [ -f $HIST_FILE ]; then
          HIST_LIST=( "$(tac $HIST_FILE | awk '!a[$0]++' | head -n$HIST_NUM)" )
     fi
          
     # Retrieve password list if PASS_DIR is not empty.
     if [ -d $PASS_DIR ]; then
          IFS=$'\n'
          PASS_LIST=( "$(find $PASS_DIR -name "*.gpg" -printf '%P\n' | sort -n | sed -e 's/.gpg//')" )
     fi

     # Place the latest used item at the top of ropass.
     if [ ! -z ${HIST_LIST+x} ]; then
          for i in "${HIST_LIST[@]}"; do
               echo "$i"
          done

          echo " >>"
     fi

     # Display passwords retrieved or return "No passwords found".
     if [ -z ${PASS_LIST+x} ]; then
          echo "No passwords found"
     else
          for i in "${PASS_LIST[@]}"; do
               echo "$i"
          done
     fi
}

function retrieve_options() {
     # Store password file contents and display a list of options.

     PASS_CONTENTS="$(pass show "$@")"

     [ ! -z "$(echo -n "$PASS_CONTENTS" | eval "$REGEX_USER")" ] && ((i=i+1)) && echo "$i: Username"
     [ ! -z "$(echo -n "$PASS_CONTENTS" | eval "$REGEX_PASS")" ] && ((i=i+1)) && echo "$i: Password"
     [ ! -z "$(echo -n "$PASS_CONTENTS" | eval "$REGEX_URL")" ] && ((i=i+1)) && echo "$i: URL"
     [ ! -z "$(echo -n "$PASS_CONTENTS" | eval "$REGEX_OTP")" ] && ((i=i+1)) && echo "$i: OTP"

     [ -z "$i" ] && echo "No valid attributes found"
     
     unset PASS_CONTENTS
}

function output_information() {
     # Retrieve the exit code to determine what action to perform
     ROFI_CODE="$?"

     echo "$1" >>$HIST_FILE

     # Press Return to type an option, press Shift+Return to copy to clipboard
     case "$2" in
          *Username )
               case "$ROFI_CODE" in
                    10 )
                         pass show "$1" | eval "$REGEX_USER" | xclip -sel "clip"
                         ;;
                    * )
                         xdotool type "$(pass show "$1" | eval "$REGEX_USER")"
                         ;;
               esac
               ;;
          *Password )
               case "$ROFI_CODE" in
                    10 )
                         pass show "$1" | eval "$REGEX_PASS" | xclip -sel "clip"
                         ;;
                    * )
                         xdotool type "$(pass show "$1" | eval "$REGEX_PASS")"
                         ;;
               esac
               ;;
          *URL )
               case "$ROFI_CODE" in
                    10 )
                         pass show "$1" | eval "$REGEX_URL" | xclip -sel "clip"
                         ;;
                    * )
                         xdotool type "$(pass show "$1" | eval "$REGEX_URL")"
                         ;;
               esac
               ;;
          *OTP )
               case "$ROFI_CODE" in
                    10 )
                         oathtool --base32 --totp "$(pass show "$1" | eval "$REGEX_OTP")" | xclip -sel "clip"
                         ;;
                    * )
                         xdotool type "$(oathtool --base32 --totp "$(pass show "$1" | eval "$REGEX_OTP")")"
                         ;;
               esac
               ;;
          * )
               exit 1
               ;;
     esac
}

function show_options() {
     # If no password file is supplied and param 2 isn't true, display list of passwords and set param 2 to true.
     if [ -z "$1" ] && [ "$2" != true ]; then
          show_options "$(retrieve_passwords | rofi -dmenu -i -p "> " -lines 11)" true
     # If a password file is supplied and param 2 is true, attempt to read the password file. Display list of choices if this succeeds.
     elif [ ! -z "$1" ] && [ "$2" == true ]; then
          if pass show "$1" &>/dev/null; then
               output_information "$1" "$(retrieve_options "$1" | rofi -dmenu -i -p "> " -kb-accept-alt "" -kb-custom-1 "Shift+Return")"
          else
               exit 1
          fi
     # If a password is not supplied to show_options and param 2 is true, exit
     else
          exit 1
     fi
}

show_options
