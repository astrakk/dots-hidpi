#!/usr/bin/env python

import argparse, configparser, subprocess, os, errno
from pathlib import Path
from shutil import copyfile

# Set up the arguments
parser = argparse.ArgumentParser()
parser.add_argument("template", help="the location of the template file")
parser.add_argument("config", help="the destination of the config file")
parser.add_argument("-v", "--verbose", help="explain what is being done", action="store_true")
args = parser.parse_args()

# Read the config file
config = configparser.ConfigParser()
config.read(os.path.expanduser("~/.config/universal/config"))

# Function to check if a file exists
#   returns: Bool
def file_exists(path):
    if args.verbose: print("Checking file exists ({})".format(path))
    if Path(path).exists():
        if args.verbose: print("File exists!")
        return True
    else:
        if args.verbose: print("File not found")
        return False

# Function to copy the template file to the config location specified
#   returns: None
def replace_config():
    if file_exists(args.template):
        if args.verbose: print("Copying template to new location ({} => {})".format(os.path.expanduser(args.template), os.path.expanduser(args.config)))
        copyfile(os.path.expanduser(args.template), os.path.expanduser(args.config))
        if args.verbose: print("Copied successfully!")
    else:
        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), args.template)
# Function to replace a value with another value in a file using sed
#   returns: None
def replace_variable(original, substitute):
    if args.verbose: print("Replacing variable '{}' with value '{}'".format(original, substitute))
    subprocess.call(['sed', '-i', '-e s/{}/{}/g'.format(original, substitute), args.config], cwd=os.getcwd())

replace_config()

replace_variable("{#colour00#}", config.get('colours', 'colour00'))
replace_variable("{#colour01#}", config.get('colours', 'colour01'))
replace_variable("{#colour02#}", config.get('colours', 'colour02'))
replace_variable("{#colour03#}", config.get('colours', 'colour03'))
replace_variable("{#colour04#}", config.get('colours', 'colour04'))
replace_variable("{#colour05#}", config.get('colours', 'colour05'))
replace_variable("{#colour06#}", config.get('colours', 'colour06'))
replace_variable("{#colour07#}", config.get('colours', 'colour07'))
replace_variable("{#colour08#}", config.get('colours', 'colour08'))
replace_variable("{#colour09#}", config.get('colours', 'colour09'))
replace_variable("{#colour0A#}", config.get('colours', 'colour0A'))
replace_variable("{#colour0B#}", config.get('colours', 'colour0B'))
replace_variable("{#colour0C#}", config.get('colours', 'colour0C'))
replace_variable("{#colour0D#}", config.get('colours', 'colour0D'))
replace_variable("{#colour0E#}", config.get('colours', 'colour0E'))
replace_variable("{#colour0F#}", config.get('colours', 'colour0F'))

replace_variable("{#font#}", config.get('fonts', 'font'))
replace_variable("{#font_size#}", config.get('fonts', 'font_size'))

replace_variable("{#terminal_font#}", config.get('fonts', 'terminal_font'))
replace_variable("{#terminal_font_size#}", config.get('fonts', 'terminal_font_size'))

replace_variable("{#glyph_font#}", config.get('fonts', 'glyph_font'))
replace_variable("{#glyph_font_size#}", config.get('fonts', 'glyph_font_size'))

if args.verbose: print("\nDone!")
